<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dias Trabalhos</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <style>
        /* Animações */
        .fade-in {
            animation: fadeIn 0.5s ease-in-out;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .scale-hover:hover {
            transform: scale(1.05);
        }
        /* Destaques visuais */
        .highlight {
            border: 2px solid #4f46e5; /* Cor azul */
            box-shadow: 0 0 8px rgba(79, 70, 229, 0.5); /* Sombra suave */
        }
        .active-pelotao {
            border-left: 4px solid #4f46e5; /* Linha lateral azul */
            padding-left: 10px;
        }
        /* Transições de slide */
        .slide-left-enter {
            animation: slideLeftEnter 0.3s ease-out;
        }
        .slide-left-exit {
            animation: slideLeftExit 0.3s ease-out;
        }
        @keyframes slideLeftEnter {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        @keyframes slideLeftExit {
            from { transform: translateX(0); opacity: 1; }
            to { transform: translateX(-100%); opacity: 0; }
        }
        /* Fade-out para atualizações dinâmicas */
        .fade-out {
            animation: fadeOut 0.3s ease-in-out;
        }
        @keyframes fadeOut {
            from { opacity: 1; transform: translateY(0); }
            to { opacity: 0; transform: translateY(-10px); }
        }
        /* Ocultar elementos */
        .hidden {
            display: none;
        }
    </style>
</head>
<body class="bg-gradient-to-br from-indigo-50 to-blue-100 min-h-screen">
    <div class="max-w-7xl mx-auto p-6">
        <!-- Header -->
        <header class="text-center mb-10">
            <h1 class="text-4xl font-bold text-gray-800 tracking-tight">Dias de Trabalho</h1>
            <p class="text-lg text-gray-600 mt-2">Escala dos Pelotões</p>
        </header>
        <!-- Escalas Diárias -->
        <section class="bg-white rounded-3xl shadow-2xl p-8 mb-10 fade-in">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-semibold text-gray-800">Escalas Diárias</h2>
                <input type="date" id="dateInput" class="border border-gray-300 rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-300">
            </div>
            <div id="dateInfo" class="mb-4 text-xl font-medium text-gray-700"></div>
            <div id="escalas" class="space-y-4"></div>
        </section>
        <!-- Integrantes do Primeiro Pelotão -->
        <section class="bg-white rounded-3xl shadow-2xl p-8 mb-10 fade-in">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-semibold text-gray-800">Integrantes do Primeiro Pelotão</h2>
                <button id="toggleMembers" class="bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-lg transition duration-300">
                    Mostrar Integrantes
                </button>
            </div>
            <ul id="membersList" class="list-disc pl-6 space-y-2 text-gray-700 hidden">
                <li><strong>Subten PM CRISTIANO C NASCIMENTO</strong> - Comandante</li>
                <li><strong>SD PM MARCELO DA COSTA CALASANS</strong></li>
                <li><strong>SD PM VENICIUS CESARIO ROSARIO DOS ANJOS</strong></li>
                <li><strong>SGT PM NAILSON SANTOS DE SANTANA</strong></li>
                <li><strong>SD PM UILTON CORREIA DE JESUS</strong></li>
                <li><strong>CB PM ANTONIO CARLOS QUEIROZ DE SOUZA JUNIOR</strong></li>
            </ul>
        </section>
        <!-- Calendários para Todos os Pelotões -->
        <section id="calendars" class="space-y-10">
            <!-- Os calendários serão gerados dinamicamente aqui -->
        </section>
    </div>
    <script>
        const grupos = {
            'Primeiro Pelotão': {
                dataBase: new Date(Date.UTC(2025, 2, 10)), // 10 de março de 2025 (Março = 2)
                ciclo: ['Trabalha durante o dia', 'Trabalha durante a noite', 'Primeiro dia de folga', 'Segundo dia de folga', 'Terceiro dia de folga']
            },
            'Segundo Pelotão': {
                dataBase: new Date(Date.UTC(2025, 2, 11)), // 11 de março de 2025
                ciclo: ['Trabalha durante o dia', 'Trabalha durante a noite', 'Primeiro dia de folga', 'Segundo dia de folga', 'Terceiro dia de folga']
            },
            'Terceiro Pelotão': {
                dataBase: new Date(Date.UTC(2025, 2, 12)), // 12 de março de 2025
                ciclo: ['Trabalha durante o dia', 'Trabalha durante a noite', 'Primeiro dia de folga', 'Segundo dia de folga', 'Terceiro dia de folga']
            },
            'Quinto Pelotão': {
                dataBase: new Date(Date.UTC(2025, 2, 13)), // 13 de março de 2025
                ciclo: ['Trabalha durante o dia', 'Trabalha durante a noite', 'Primeiro dia de folga', 'Segundo dia de folga', 'Terceiro dia de folga']
            },
            'Sexto Pelotão': {
                dataBase: new Date(Date.UTC(2025, 2, 14)), // 14 de março de 2025
                ciclo: ['Trabalha durante o dia', 'Trabalha durante a noite', 'Primeiro dia de folga', 'Segundo dia de folga', 'Terceiro dia de folga']
            }
        };

        function calcularStatus(dataBase, data, ciclo) {
            const diffTime = Math.abs(data - dataBase);
            const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
            const cicloIndex = diffDays % ciclo.length;
            return ciclo[cicloIndex];
        }

        function getStatusColor(status) {
            if (status === 'Trabalha durante o dia') return 'bg-yellow-400 text-yellow-900';
            if (status === 'Trabalha durante a noite') return 'bg-black text-white';
            if (status === 'Primeiro dia de folga') return 'bg-green-400 text-green-950';
            if (status === 'Segundo dia de folga') return 'bg-green-200 text-green-800';
            if (status === 'Terceiro dia de folga') return 'bg-red-400 text-red-900';
            return 'bg-gray-100 text-gray-800';
        }

        function updateEscalas(selectedDate) {
            const escalasDiv = document.getElementById('escalas');
            escalasDiv.classList.add('fade-out'); // Adiciona classe para fade-out
            setTimeout(() => {
                escalasDiv.innerHTML = ''; // Limpa o conteúdo após a animação
                escalasDiv.classList.remove('fade-out'); // Remove fade-out
                const dateInfo = document.getElementById('dateInfo');
                const diasSemana = ['Domingo', 'Segunda-feira', 'Terça-feira', 'Quarta-feira', 'Quinta-feira', 'Sexta-feira', 'Sábado'];
                const dataFormatada = selectedDate.toLocaleDateString('pt-BR', { timeZone: 'UTC' });
                dateInfo.textContent = `${diasSemana[selectedDate.getUTCDay()]} - ${dataFormatada}`;
                for (const [grupo, config] of Object.entries(grupos)) {
                    let status = calcularStatus(config.dataBase, selectedDate, config.ciclo);
                    const div = document.createElement('div');
                    div.className = 'flex items-center justify-between p-4 rounded-2xl border border-gray-200 bg-white shadow-md transition duration-300 hover:shadow-lg scale-hover fade-in';
                    div.innerHTML = `
                        <div class="font-medium text-lg">${grupo}</div>
                        <div class="px-4 py-2 rounded-full text-sm font-medium ${getStatusColor(status)}">
                            ${status}
                        </div>
                    `;
                    escalasDiv.appendChild(div);
                }
            }, 300); // Aguarda o tempo da animação fade-out
        }

        const dateInput = document.getElementById('dateInput');
        dateInput.valueAsDate = new Date();
        updateEscalas(new Date());
        dateInput.addEventListener('change', (e) => {
            const selectedDate = new Date(e.target.value + "T00:00:00Z");
            updateEscalas(selectedDate);
            highlightCalendarDays(selectedDate);
        });

        function getMonthName(month) {
            const monthNames = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho',
                               'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];
            return monthNames[month];
        }

        function getCalendarStatusColor(status) {
            if (status === 'Trabalha durante o dia') return 'bg-yellow-300 text-yellow-900';
            if (status === 'Trabalha durante a noite') return 'bg-indigo-500 text-white';
            return 'bg-gray-200 text-gray-800';
        }

        function createCalendarForPelotao(pelotao, currentMonth, currentYear) {
            const calendarDiv = document.createElement('div');
            calendarDiv.className = 'bg-white rounded-3xl shadow-2xl p-8 fade-in';
            const title = document.createElement('h2');
            title.className = 'text-2xl font-bold text-gray-800 mb-8 active-pelotao';
            title.textContent = `Calendário do ${pelotao}`;
            calendarDiv.appendChild(title);
            const controls = document.createElement('div');
            controls.className = 'flex justify-between items-center mb-8';
            const prevButton = document.createElement('button');
            prevButton.className = 'flex items-center space-x-2 bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium rounded-lg px-4 py-2 transition duration-300';
            prevButton.innerHTML = '<i class="fas fa-chevron-left text-lg"></i><span>Mês Anterior</span>';
            controls.appendChild(prevButton);
            const monthDisplay = document.createElement('div');
            monthDisplay.className = 'text-xl font-semibold text-gray-700';
            monthDisplay.textContent = `${getMonthName(currentMonth)} ${currentYear}`;
            controls.appendChild(monthDisplay);
            const nextButton = document.createElement('button');
            nextButton.className = 'flex items-center space-x-2 bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium rounded-lg px-4 py-2 transition duration-300';
            nextButton.innerHTML = '<span>Próximo Mês</span><i class="fas fa-chevron-right text-lg"></i>';
            controls.appendChild(nextButton);
            calendarDiv.appendChild(controls);
            const calendarGrid = document.createElement('div');
            calendarGrid.className = 'grid grid-cols-7 gap-2 text-center font-medium mb-4';
            const daysOfWeek = ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'];
            daysOfWeek.forEach(day => {
                const dayDiv = document.createElement('div');
                dayDiv.className = 'text-gray-700 font-semibold';
                dayDiv.textContent = day;
                calendarGrid.appendChild(dayDiv);
            });
            calendarDiv.appendChild(calendarGrid);
            const calendar = document.createElement('div');
            calendar.className = 'grid grid-cols-7 gap-2';
            calendarDiv.appendChild(calendar);

            function updateCalendar() {
                calendar.innerHTML = '';
                const firstDay = new Date(currentYear, currentMonth, 1);
                const lastDay = new Date(currentYear, currentMonth + 1, 0);
                const firstDayIndex = firstDay.getDay();
                for (let i = 0; i < firstDayIndex; i++) {
                    const emptyCell = document.createElement('div');
                    emptyCell.className = 'h-16 border rounded-lg bg-gray-50';
                    calendar.appendChild(emptyCell);
                }
                for (let day = 1; day <= lastDay.getDate(); day++) {
                    const date = new Date(Date.UTC(currentYear, currentMonth, day));
                    const status = calcularStatus(grupos[pelotao].dataBase, date, grupos[pelotao].ciclo);
                    const dayCell = document.createElement('div');
                    const isWorkDay = status === 'Trabalha durante o dia' || status === 'Trabalha durante a noite';
                    const statusLabel = status === 'Trabalha durante o dia' ? 'Dia' :
                                      status === 'Trabalha durante a noite' ? 'Noite' : 'Folga';
                    dayCell.className = `h-16 border rounded-lg flex flex-col items-center justify-center ${getCalendarStatusColor(status)} transition duration-300 hover:scale-105`;
                    const dayNumber = document.createElement('div');
                    dayNumber.className = 'text-lg font-bold';
                    dayNumber.textContent = day;
                    const statusText = document.createElement('div');
                    statusText.className = 'text-xs font-medium';
                    statusText.textContent = statusLabel;
                    dayCell.appendChild(dayNumber);
                    dayCell.appendChild(statusText);
                    calendar.appendChild(dayCell);
                }
            }

            prevButton.addEventListener('click', () => {
                currentMonth--;
                if (currentMonth < 0) {
                    currentMonth = 11;
                    currentYear--;
                }
                monthDisplay.textContent = `${getMonthName(currentMonth)} ${currentYear}`;
                updateCalendar();
            });

            nextButton.addEventListener('click', () => {
                currentMonth++;
                if (currentMonth > 11) {
                    currentMonth = 0;
                    currentYear++;
                }
                monthDisplay.textContent = `${getMonthName(currentMonth)} ${currentYear}`;
                updateCalendar();
            });

            updateCalendar();
            return calendarDiv;
        }

        function highlightCalendarDays(selectedDate) {
            const calendars = document.querySelectorAll('#calendars .grid.grid-cols-7 > div');
            calendars.forEach(dayCell => {
                dayCell.classList.remove('highlight'); // Remove destaque anterior
            });
            const selectedDay = selectedDate.getDate();
            const selectedMonth = selectedDate.getMonth();
            const selectedYear = selectedDate.getFullYear();
            calendars.forEach(dayCell => {
                const dayNumber = parseInt(dayCell.querySelector('.text-lg')?.textContent, 10);
                const monthDisplay = document.querySelector('#calendars .text-xl.font-semibold');
                const [monthName, year] = monthDisplay.textContent.split(' ');
                const currentMonth = getMonthNameIndex(monthName);
                const currentYear = parseInt(year, 10);
                if (dayNumber === selectedDay && currentMonth === selectedMonth && currentYear === selectedYear) {
                    dayCell.classList.add('highlight'); // Adiciona destaque
                }
            });
        }

        function getMonthNameIndex(monthName) {
            const monthNames = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho',
                               'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];
            return monthNames.indexOf(monthName);
        }

        const calendarsContainer = document.getElementById('calendars');
        let currentMonth = new Date().getMonth();
        let currentYear = new Date().getFullYear();
        for (const pelotao in grupos) {
            calendarsContainer.appendChild(createCalendarForPelotao(pelotao, currentMonth, currentYear));
        }

        // Botão para alternar visibilidade dos integrantes
        document.getElementById('toggleMembers').addEventListener('click', () => {
            const membersList = document.getElementById('membersList');
            const toggleButton = document.getElementById('toggleMembers');

            if (membersList.classList.contains('hidden')) {
                membersList.classList.remove('hidden');
                toggleButton.textContent = 'Ocultar Integrantes';
            } else {
                membersList.classList.add('hidden');
                toggleButton.textContent = 'Mostrar Integrantes';
            }
        });
    </script>
</body>
</html>
